# IAM Role for EKS Cluster
resource "aws_iam_role" "eks_cluster" {
  name = "eks-cluster-role"

  assume_role_policy = jsonencode({
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = { Service = "eks.amazonaws.com" }
    }]
    Version = "2012-10-17"
  })
}

# Attaching AmazonEKSClusterPolicy to Cluster Role
resource "aws_iam_role_policy_attachment" "eks_cluster_policy" {
  role       = aws_iam_role.eks_cluster.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
}

# Use Default VPC and Public Subnets if we want create new vpc and subnets we can use resource "aws_vpc" buthere we are using already existing default vpc so we use data 
data "aws_vpc" "default" {
  default = true
}

data "aws_subnets" "public" {
  filter {
    name   = "vpc-id"
    values = [data.aws_vpc.default.id]
  }
}

# EKS Cluster with Node Group Configuration
resource "aws_eks_cluster" "example" {
  name       = "EKS_CLOUD"
  role_arn    = aws_iam_role.eks_cluster.arn
  vpc_config {
    subnet_ids = data.aws_subnets.public.ids
  }

  # Node Group with Autoscaling (inline configuration)
  create_node_group {
    name = "Node-cloud"
    node_role_arn = aws_iam_role.eks_cluster.arn  # Reuse Cluster Role
    subnet_ids = data.aws_subnets.public.ids
    scaling_config {
      desired_size = 1
      max_size     = 2
      min_size     = 1
    }
    instance_types = ["t2.medium"]
  }
}
